<?php

/**
 * @file
 * Main module.
 */

use Drupal\qualtricsxm\qualtricsxm;
use Drupal\Core\Routing\RouteMatchInterface;
use Drupal\Core\Cache;

/**
 * Implements hook_help().
 */
function qualtricsxm_help($route_name, RouteMatchInterface $route_match) {
  switch ($route_name) {

    case "help.page.qualtricsxm":
      $output = t("The Qualtricsxm module render a Qualtrics form page by Qualtric form ID, it also provides a simple qualtric API dependency functions.");
      return $output;
  }
}

/**
 * Create a qualtricsxm class can be accessible.
 */
function qualtricsxm_static() {
  $api_token = !empty(\Drupal::config('qualtricsxm.settings')->get('qualtricsxm_api_token')) ? \Drupal::config('qualtricsxm.settings')->get('qualtricsxm_api_token') : "";
  $api_url = "https://survey.qualtrics.com/API/v3/";
  static $drupal_static_fast;

  if (!isset($drupal_static_fast)) {
    $drupal_static_fast['qulatricsxm'] = &drupal_static(__FUNCTION__);
  }
  $qulatricsxm = &$drupal_static_fast['qulatricsxm'];

  if (!isset($qulatricsxm)) {
    $qulatricsxm = new Qualtricsxm($api_url, $api_token);
  }

  return $qulatricsxm;

}

/**
 * Helper function get conf settings of width and height.
 */
function qualtricsxm_get_config_width_height() {
  $qualtricsxm_embed_width = !empty(\Drupal::config('qualtricsxm.settings')->get('qualtricsxm_embed_width')) ? \Drupal::config('qualtricsxm.settings')->get('qualtricsxm_embed_width') : "100%";
  $qualtricsxm_embed_height = !empty(\Drupal::config('qualtricsxm.settings')->get('qualtricsxm_embed_height')) ? \Drupal::config('qualtricsxm.settings')->get('qualtricsxm_embed_height') : "900";

  return ['width' => $qualtricsxm_embed_width, 'height' => $qualtricsxm_embed_height];

}

/**
 * Helper function get accessible base url.
 */
function qualtricsxm_get_base_url() {
  $secure_embed = !empty(\Drupal::config('qualtricsxm.settings')->get('qualtricsxm_secure_embed')) ? "https://" : "http://";
  $data_url_path = !empty(\Drupal::config('qualtricsxm.settings')->get('qualtricsxm_organization_id')) ?
    \Drupal::config('qualtricsxm.settings')->get('qualtricsxm_organization_id') : \Drupal::config('qualtricsxm.settings')->get("qualtricsxm_datacenter");

  $embed_base_url = !empty(\Drupal::config('qualtricsxm.settings')->get("qualtricsxm_datacenter")) ?
    $secure_embed . trim($data_url_path) . ".qualtrics.com/jfe/form" : $secure_embed . 'survey.qualtrics.com/jfe/form';
  return $embed_base_url;
}

/**
 * Help function to get the survey responseCounts.
 *
 * @param string $survey_id
 *   ID of the survey to be loaded.
 *
 * @return bool|string
 *   FALSE|Json
 */
function qualtricsxm_count_survey_submissions($survey_id) {
  // Invoke getResponseData API.
  $qualtrics = qualtricsxm_static();
  $response_counts = $qualtrics->getSubmissions($survey_id);

  return $response_counts;
}

/**
 * Retrieving the list of surveys from Qualtrics.
 *
 * @return array
 *   List of surveys in array format.
 */
function qualtricsxm_get_surveys() {
  $surveys = &drupal_static(__FUNCTION__);

  if (!isset($surveys)) {
    if ($cache = \Drupal::cache()->get('qualtrics_surveys_list_cache')) {
      $surveys = $cache->data;
    }
    else {
      $qualtrics = qualtricsxm_static();
      $surveys_array = $qualtrics->getSurveyList();

      if (!empty($surveys_array)) {
        // Only cache the right data.
        \Drupal::cache()->set('qualtrics_surveys_list_cache', $surveys_array, time() + 60 * 60 * 4);

        foreach ($surveys_array as $key => $survey) {
          $id = $survey['id'];
          $submissions = $qualtrics->getSubmissions($id);
          $surveys_array[$key]['id'] = t('Check the survey, click on @link', ["@link" => "<a href=/qualtricsxm/survey/$id>" . $id . "</a>"]);
          $surveys_array[$key]['auditable'] = empty($submissions->auditable) ? NULL : $submissions->auditable;
          $surveys_array[$key]['generated'] = empty($submissions->generated) ? NULL : $submissions->generated;
          $surveys_array[$key]['deleted'] = empty($submissions->deleted) ? NULL : $submissions->deleted;
        }
        $surveys = $surveys_array;
      }
    }
  }
  return $surveys;
}

/**
 * Helper function get survey by Qualtrics Survey ID.
 */
function qualtricsxm_get_survey($survey_id) {
  $qualtrics = qualtricsxm_static();
  $survey = $qualtrics->getSurvey($survey_id);

  return $survey;
}

/**
 * Helper function get surveys list table.
 */
function qualtricsxm_get_survey_list_table() {

  $surveys = qualtricsxm_get_surveys();

  if (!$surveys) {
    return "Qualtrics not connected.";
  }

  $table = &drupal_static(__FUNCTION__);

  if (!isset($table)) {
    if ($cache = \Drupal::cache()->get('admin_table_cache')) {
      $table = $cache->data;
    }
    else {
      $table = [
        '#theme' => 'table',
        '#header' => [
          t('Name'),
          t('Survey ID'),
          t('User ID'),
          t('Last Updated'),
          t('is Active'),
          t('Auditable'),
          t('Generated'),
          t('Deleted'),
        ],
        '#rows' => $surveys,
      ];
      // 4hours.
      \Drupal::cache()->set('admin_table_cache', $table, time() + 60 * 60 * 4);
    }
  }

  return $table;
}
